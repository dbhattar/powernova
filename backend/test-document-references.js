/**
 * Test script for document reference functionality
 * Run this to verify that document references are working correctly
 */

const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

// Configuration
const API_BASE_URL = 'http://localhost:3000'; // Update with your API URL
const TEST_USER_TOKEN = 'your-test-token'; // Update with valid user token

class DocumentReferenceTest {
  constructor() {
    this.apiClient = axios.create({
      baseURL: API_BASE_URL,
      headers: {
        'Authorization': `Bearer ${TEST_USER_TOKEN}`,
        'Content-Type': 'application/json',
      },
    });
  }

  /**
   * Test document upload and processing
   */
  async testDocumentUpload() {
    console.log('🔄 Testing document upload...');
    
    try {
      // Create a test document
      const testContent = `
        PowerNova Energy Projects
        
        Solar Energy Overview:
        Solar energy is a renewable energy source that harnesses the power of the sun to generate electricity.
        
        Wind Energy Overview:
        Wind energy is generated by converting wind currents into electricity using wind turbines.
        
        Project Timeline:
        - Phase 1: Site assessment and permitting (6 months)
        - Phase 2: Construction and installation (12 months)
        - Phase 3: Testing and commissioning (3 months)
        - Phase 4: Commercial operation (ongoing)
      `;
      
      const testFilePath = path.join(__dirname, 'test-document.txt');
      fs.writeFileSync(testFilePath, testContent);
      
      // Upload document
      const formData = new FormData();
      formData.append('document', fs.createReadStream(testFilePath));
      
      const uploadResponse = await axios.post(`${API_BASE_URL}/api/documents/upload`, formData, {
        headers: {
          ...formData.getHeaders(),
          'Authorization': `Bearer ${TEST_USER_TOKEN}`,
        },
      });
      
      console.log('✅ Document uploaded successfully:', uploadResponse.data);
      
      // Clean up test file
      fs.unlinkSync(testFilePath);
      
      return uploadResponse.data.docId;
    } catch (error) {
      console.error('❌ Document upload failed:', error.response?.data || error.message);
      return null;
    }
  }

  /**
   * Test chat with document context
   */
  async testChatWithDocuments() {
    console.log('🔄 Testing chat with document context...');
    
    try {
      const chatResponse = await this.apiClient.post('/api/chat/message', {
        message: 'Tell me about solar energy projects and their timeline',
        threadId: null,
        isFollowUp: false,
      });
      
      console.log('✅ Chat response received:');
      console.log('Response:', chatResponse.data.response);
      console.log('Has references:', chatResponse.data.hasReferences);
      console.log('Source documents:', chatResponse.data.documentSources);
      
      if (chatResponse.data.referenceSummary) {
        console.log('Reference summary:', chatResponse.data.referenceSummary);
      }
      
      return chatResponse.data;
    } catch (error) {
      console.error('❌ Chat test failed:', error.response?.data || error.message);
      return null;
    }
  }

  /**
   * Test document reference endpoint
   */
  async testDocumentReference(documentId) {
    console.log('🔄 Testing document reference endpoint...');
    
    try {
      const docResponse = await this.apiClient.get(`/api/chat/document/${documentId}`);
      
      console.log('✅ Document reference retrieved:');
      console.log('Document details:', docResponse.data);
      
      return docResponse.data;
    } catch (error) {
      console.error('❌ Document reference test failed:', error.response?.data || error.message);
      return null;
    }
  }

  /**
   * Run all tests
   */
  async runAllTests() {
    console.log('🚀 Starting document reference tests...\n');
    
    // Test 1: Upload document
    const docId = await this.testDocumentUpload();
    if (!docId) {
      console.log('❌ Cannot continue tests without document upload');
      return;
    }
    
    // Wait for document processing
    console.log('⏳ Waiting for document processing...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // Test 2: Chat with document context
    const chatResult = await this.testChatWithDocuments();
    if (!chatResult) {
      console.log('❌ Chat test failed');
      return;
    }
    
    // Test 3: Document reference endpoint
    if (chatResult.documentSources && chatResult.documentSources.length > 0) {
      const firstDocId = chatResult.documentSources[0].id || chatResult.documentSources[0];
      await this.testDocumentReference(firstDocId);
    }
    
    console.log('\n✅ All tests completed!');
  }
}

// Run tests if this file is executed directly
if (require.main === module) {
  const tester = new DocumentReferenceTest();
  tester.runAllTests().catch(console.error);
}

module.exports = DocumentReferenceTest;
